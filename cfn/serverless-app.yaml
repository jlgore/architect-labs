AWSTemplateFormatVersion: '2010-09-09'
Description: Web API with EC2 and RDS

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment name
    
  EC2InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t3.nano
      - t3.micro
      - t3.small
    Description: EC2 instance type
    
  DBUsername:
    Type: String
    Default: dbadmin
    Description: Username for the database
    NoEcho: true
    
  DBPassword:
    Type: String
    Description: Password for the database
    NoEcho: true
    MinLength: 8
    MaxLength: 41
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters

Resources:
  # VPC for our resources
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-VPC"

  # Public subnet for the EC2 instance
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-PublicSubnet"
  
  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-IGW"
          
  # Attach Internet Gateway to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-PublicRouteTable"
  
  # Route to Internet
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  # Associate Route Table with Subnet
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  
  # DB Subnet Group
  DBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-DBSubnet1"
  
  DBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-DBSubnet2"
          
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref DBSubnet1
        - !Ref DBSubnet2
  
  # Security Groups
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP inbound traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-WebSG"
          
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL traffic from Web Server
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-DBSG"
  
  # EC2 Web Server
  WebServerInstance:
    Type: AWS::EC2::Instance
    DependsOn: Database
    Properties:
      InstanceType: !Ref EC2InstanceType
      KeyName: vockey
      ImageId: ami-0533f2ba8a1995cf9  # Amazon Linux 2023 - adjust for your region
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref WebServerSecurityGroup
          SubnetId: !Ref PublicSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y httpd mysql
          
          # Install Node.js
          curl -sL https://rpm.nodesource.com/setup_16.x | bash -
          yum install -y nodejs
          
          # Create a simple API with Hono
          mkdir -p /var/www/api
          cd /var/www/api
          
          cat > package.json << 'EOL'
          {
            "name": "hono-api",
            "version": "1.0.0",
            "dependencies": {
              "hono": "^3.0.0",
              "mysql2": "^2.3.0"
            }
          }
          EOL
          
          cat > server.js << 'EOL'
          const { Hono } = require('hono');
          const { serveStatic } = require('hono/serve-static.js');
          const mysql = require('mysql2/promise');
          
          const app = new Hono();
          const port = 80;
          
          // Database configuration
          const dbConfig = {
            host: '${Database.Endpoint.Address}',
            user: '${DBUsername}',
            password: '${DBPassword}',
            database: 'appdatabase'
          };
          
          app.get('/', (c) => {
            return c.json({ message: 'Hello from Hono!' });
          });
          
          app.get('/items', async (c) => {
            try {
              // Create connection to MySQL
              const connection = await mysql.createConnection(dbConfig);
              
              // Create items table if it doesn't exist
              await connection.execute(`
                CREATE TABLE IF NOT EXISTS items (
                  id INT AUTO_INCREMENT PRIMARY KEY,
                  name VARCHAR(255) NOT NULL,
                  description TEXT
                )
              `);
              
              // Sample data
              await connection.execute(`
                INSERT IGNORE INTO items (id, name, description) VALUES 
                (1, 'Item 1', 'First item'),
                (2, 'Item 2', 'Second item'),
                (3, 'Item 3', 'Third item')
              `);
              
              // Query items
              const [rows] = await connection.execute('SELECT * FROM items');
              
              // Close connection
              await connection.end();
              
              // Return items as JSON
              return c.json({ items: rows });
            } catch (error) {
              console.error('Error:', error);
              return c.json({ error: 'Database error' }, 500);
            }
          });
          
          console.log('Starting server on port ${port}');
          app.fire();
          EOL
          
          # Fix the server code to use a regular HTTP server
          cat > server.js << 'EOL'
          const { Hono } = require('hono');
          const { serveStatic } = require('hono/serve-static.js');
          const mysql = require('mysql2/promise');
          const { serve } = require('@hono/node-server');
          
          const app = new Hono();
          const port = 80;
          
          // Database configuration
          const dbConfig = {
            host: '${Database.Endpoint.Address}',
            user: '${DBUsername}',
            password: '${DBPassword}',
            database: 'appdatabase'
          };
          
          app.get('/', (c) => {
            return c.json({ message: 'Hello from Hono!' });
          });
          
          app.get('/items', async (c) => {
            try {
              // Create connection to MySQL
              const connection = await mysql.createConnection(dbConfig);
              
              // Create items table if it doesn't exist
              await connection.execute(`
                CREATE TABLE IF NOT EXISTS items (
                  id INT AUTO_INCREMENT PRIMARY KEY,
                  name VARCHAR(255) NOT NULL,
                  description TEXT
                )
              `);
              
              // Sample data
              await connection.execute(`
                INSERT IGNORE INTO items (id, name, description) VALUES 
                (1, 'Item 1', 'First item'),
                (2, 'Item 2', 'Second item'),
                (3, 'Item 3', 'Third item')
              `);
              
              // Query items
              const [rows] = await connection.execute('SELECT * FROM items');
              
              // Close connection
              await connection.end();
              
              // Return items as JSON
              return c.json({ items: rows });
            } catch (error) {
              console.error('Error:', error);
              return c.json({ error: 'Database error' }, 500);
            }
          });
          
          // Create a simple HTTP server directly if Hono doesn't work well
          const http = require('http');
          
          http.createServer(async (req, res) => {
            if (req.url === '/') {
              res.writeHead(200, { 'Content-Type': 'application/json' });
              res.end(JSON.stringify({ message: 'Hello World!' }));
            } 
            else if (req.url === '/items') {
              try {
                // Create connection to MySQL
                const connection = await mysql.createConnection(dbConfig);
                
                // Create items table if it doesn't exist
                await connection.execute(`
                  CREATE TABLE IF NOT EXISTS items (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    name VARCHAR(255) NOT NULL,
                    description TEXT
                  )
                `);
                
                // Sample data
                await connection.execute(`
                  INSERT IGNORE INTO items (id, name, description) VALUES 
                  (1, 'Item 1', 'First item'),
                  (2, 'Item 2', 'Second item'),
                  (3, 'Item 3', 'Third item')
                `);
                
                // Query items
                const [rows] = await connection.execute('SELECT * FROM items');
                
                // Close connection
                await connection.end();
                
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ items: rows }));
              } catch (error) {
                console.error('Error:', error);
                res.writeHead(500, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: 'Database error' }));
              }
            } else {
              res.writeHead(404, { 'Content-Type': 'application/json' });
              res.end(JSON.stringify({ error: 'Route not found' }));
            }
          }).listen(port, () => {
            console.log(`Server running at http://localhost:${port}/`);
          });
          EOL
          
          # Install dependencies and start the server
          cd /var/www/api
          npm install
          
          # Configure service
          cat > /etc/systemd/system/api.service << 'EOL'
          [Unit]
          Description=Node.js API Server
          After=network.target
          
          [Service]
          WorkingDirectory=/var/www/api
          ExecStart=/usr/bin/node server.js
          Restart=always
          User=root
          Group=root
          Environment=PATH=/usr/bin:/usr/local/bin
          Environment=NODE_ENV=production
          
          [Install]
          WantedBy=multi-user.target
          EOL
          
          # Enable and start API service
          systemctl enable api.service
          systemctl start api.service
          
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-WebServer"
  
  # RDS Database
  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: appdatabase
      Engine: mysql
      EngineVersion: 8.0.28
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      StorageType: gp2
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !GetAtt DBSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      Tags:
        - Key: Environment
          Value: !Ref Environment

Outputs:
  WebServerPublicIP:
    Description: Public IP address of the web server
    Value: !GetAtt WebServerInstance.PublicIp
    Export:
      Name: !Sub "${Environment}-WebServerPublicIP"
      
  APIEndpoint:
    Description: API endpoint URL
    Value: !Sub "http://${WebServerInstance.PublicIp}/items"
    Export:
      Name: !Sub "${Environment}-APIEndpoint"
      
  DatabaseEndpoint:
    Description: RDS Database endpoint
    Value: !GetAtt Database.Endpoint.Address
    Export:
      Name: !Sub "${Environment}-DatabaseEndpoint"
      
  DatabasePort:
    Description: RDS Database port
    Value: !GetAtt Database.Endpoint.Port
    Export:
      Name: !Sub "${Environment}-DatabasePort" 