AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless API with Lambda, CloudFront, and RDS

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment name
    
  LambdaRuntime:
    Type: String
    Default: nodejs18.x
    AllowedValues:
      - nodejs16.x
      - nodejs18.x
    Description: Lambda function runtime
    
  DBUsername:
    Type: String
    Default: dbadmin
    Description: Username for the database
    NoEcho: true
    
  DBPassword:
    Type: String
    Description: Password for the database
    NoEcho: true
    MinLength: 8
    MaxLength: 41
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters

Resources:
  # VPC for our database
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-VPC"

  # DB Subnet Group
  DBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-DBSubnet1"
  
  DBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-DBSubnet2"
          
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref DBSubnet1
        - !Ref DBSubnet2

  # Internet Gateway for VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-IGW"
          
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Route Table for DB subnets
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-RouteTable"

  # Route to the internet
  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Route Table with Subnets
  DBSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DBSubnet1
      RouteTableId: !Ref RouteTable

  DBSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DBSubnet2
      RouteTableId: !Ref RouteTable

  # Security Group for RDS
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable MySQL access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-DBSG"

  # S3 Bucket for Lambda Code
  LambdaCodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 365
            NoncurrentVersionExpirationInDays: 30

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  # Lambda Function for API
  APIFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: !Ref LambdaRuntime
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          DB_HOST: !GetAtt Database.Endpoint.Address
          DB_PORT: !GetAtt Database.Endpoint.Port
          DB_NAME: appdatabase
          DB_USER: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
      Code:
        ZipFile: |
          const { Hono } = require('hono');
          const { handle } = require('hono/aws-lambda');
          const mysql = require('mysql2/promise');
          
          const app = new Hono();
          
          // Database configuration
          const dbConfig = {
            host: process.env.DB_HOST,
            port: process.env.DB_PORT,
            user: process.env.DB_USER,
            password: process.env.DB_PASSWORD,
            database: process.env.DB_NAME
          };
          
          app.get('/', (c) => {
            return c.json({ message: 'Hello from Hono!' });
          });
          
          app.get('/items', async (c) => {
            try {
              // Create connection to MySQL
              const connection = await mysql.createConnection(dbConfig);
              
              // Create items table if it doesn't exist
              await connection.execute(`
                CREATE TABLE IF NOT EXISTS items (
                  id INT AUTO_INCREMENT PRIMARY KEY,
                  name VARCHAR(255) NOT NULL,
                  description TEXT
                )
              `);
              
              // Sample data
              await connection.execute(`
                INSERT IGNORE INTO items (id, name, description) VALUES 
                (1, 'Item 1', 'First item'),
                (2, 'Item 2', 'Second item'),
                (3, 'Item 3', 'Third item')
              `);
              
              // Query items
              const [rows] = await connection.execute('SELECT * FROM items');
              
              // Close connection
              await connection.end();
              
              // Return items as JSON
              return c.json({ items: rows });
            } catch (error) {
              console.error('Error:', error);
              return c.json({ error: 'Database error' }, 500);
            }
          });
          
          exports.handler = handle(app);
      # Install additional packages
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Lambda URL Configuration
  LambdaFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      TargetFunctionArn: !GetAtt APIFunction.Arn

  # Lambda Resource Policy
  LambdaPermissionForURLInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunctionUrl
      FunctionName: !Ref APIFunction
      Principal: '*'
      FunctionUrlAuthType: NONE

  # CloudFront Distribution to access Lambda URL
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          TargetOriginId: LambdaOrigin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
          OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac # AllViewerExceptHostHeader
        Origins:
          - Id: LambdaOrigin
            DomainName: !Select [2, !Split ["/", !GetAtt LambdaFunctionUrl.FunctionUrl]]
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        PriceClass: PriceClass_100
        Comment: !Sub "${Environment} API Distribution"
  
  # RDS Database
  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: appdatabase
      Engine: mysql
      EngineVersion: 8.0.28
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      StorageType: gp2
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !GetAtt DBSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: true
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Layer for Hono.js and other dependencies
  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - nodejs16.x
        - nodejs18.x
      Content:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: layer.zip
      Description: Layer containing Hono.js and MySQL dependencies

Outputs:
  LambdaFunctionUrl:
    Description: Direct Lambda Function URL
    Value: !GetAtt LambdaFunctionUrl.FunctionUrl
    Export:
      Name: !Sub "${Environment}-LambdaFunctionUrl"
      
  CloudFrontDomain:
    Description: CloudFront Distribution Domain
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub "${Environment}-CloudFrontDomain"
      
  ApiEndpoint:
    Description: API endpoint URL (through CloudFront)
    Value: !Sub "https://${CloudFrontDistribution.DomainName}/items"
    Export:
      Name: !Sub "${Environment}-ApiEndpoint"
      
  DatabaseEndpoint:
    Description: RDS Database endpoint
    Value: !GetAtt Database.Endpoint.Address
    Export:
      Name: !Sub "${Environment}-DatabaseEndpoint"
      
  DatabasePort:
    Description: RDS Database port
    Value: !GetAtt Database.Endpoint.Port
    Export:
      Name: !Sub "${Environment}-DatabasePort" 