AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless API with Lambda, API Gateway, and DynamoDB

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment name
    
  LambdaRuntime:
    Type: String
    Default: nodejs18.x
    AllowedValues:
      - nodejs16.x
      - nodejs18.x
    Description: Lambda function runtime

Mappings:
  EnvironmentConfig:
    dev:
      ReadCapacity: 1
      WriteCapacity: 1
    test:
      ReadCapacity: 2
      WriteCapacity: 2
    prod:
      ReadCapacity: 5
      WriteCapacity: 5

Resources:
  # API Gateway REST API
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,X-Api-Key'"
        AllowOrigin: "'*'"
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          ThrottlingBurstLimit: 10
          ThrottlingRateLimit: 5

  # Single Lambda Function using Hono
  HonoApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-hono-api"
      Handler: index.handler
      Runtime: !Ref LambdaRuntime
      CodeUri: ./lambda/hono-api/
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          TABLE_NAME: !Ref ItemsTable
          ENVIRONMENT: !Ref Environment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ItemsTable
      Events:
        GetItems:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /items
            Method: GET
        CreateItem:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /items
            Method: POST
        GetItemById:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /items/{id}
            Method: GET
        UpdateItem:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /items/{id}
            Method: PUT
        DeleteItem:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /items/{id}
            Method: DELETE
        Options:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /items
            Method: OPTIONS
        OptionsWithId:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /items/{id}
            Method: OPTIONS

  # DynamoDB Table
  ItemsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-items"
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: !FindInMap [EnvironmentConfig, !Ref Environment, ReadCapacity]
        WriteCapacityUnits: !FindInMap [EnvironmentConfig, !Ref Environment, WriteCapacity]
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      Tags:
        - Key: Environment
          Value: !Ref Environment

# Conditions for conditional resource creation
Conditions:
  IsProd: !Equals [!Ref Environment, "prod"]

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${Environment}-ApiEndpoint"

  ItemsTableName:
    Description: DynamoDB Items Table name
    Value: !Ref ItemsTable
    Export:
      Name: !Sub "${Environment}-ItemsTableName"
      
  HonoApiFunctionName:
    Description: Hono API Lambda function name
    Value: !Ref HonoApiFunction
    Export:
      Name: !Sub "${Environment}-HonoApiFunction" 