AWSTemplateFormatVersion: "2010-09-09"
Description: "Web Application Stack with VPC, Subnets, Auto Scaling Group, and RDS"

Parameters:
  EnvironmentName:
    Description: Environment name
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod

  VpcCIDR:
    Description: CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: CIDR block for Public Subnet 1
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet2CIDR:
    Description: CIDR block for Public Subnet 2
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet1CIDR:
    Description: CIDR block for Private Subnet 1
    Type: String
    Default: 10.0.3.0/24

  PrivateSubnet2CIDR:
    Description: CIDR block for Private Subnet 2
    Type: String
    Default: 10.0.4.0/24

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3.small
      - t3.medium

  DBInstanceClass:
    Description: Database instance class
    Type: String
    Default: db.t3.micro
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium

  DBName:
    Description: Database name
    Type: String
    Default: mydb
    MinLength: 1
    MaxLength: 64
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"

  DBUser:
    Description: Database admin username
    Type: String
    Default: admin
    MinLength: 1
    MaxLength: 16
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"

  DBPassword:
    Description: Database admin password
    Type: String
    NoEcho: true
    MinLength: 8
    MaxLength: 41
    AllowedPattern: "[a-zA-Z0-9]*"

  KeyName:
    Description: EC2 Key Pair for SSH access
    Type: AWS::EC2::KeyPair::KeyName
    Default: vockey

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0c02fb55956c7d316
    us-east-2:
      AMI: ami-05d72852800cbf29e
    us-west-1:
      AMI: ami-04669a22aad391419
    us-west-2:
      AMI: ami-0a7d051a1c4b54f65
    eu-west-1:
      AMI: ami-04f7efe62f419d9f5
    ap-northeast-1:
      AMI: ami-0df99b3a8349462c6

Conditions:
  IsProd: !Equals [!Ref EnvironmentName, "prod"]

Resources:
  # VPC and Network Components
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-VPC"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-IGW"

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-Public-Subnet-1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-Public-Subnet-2"

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-Private-Subnet-1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-Private-Subnet-2"

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-Public-Routes"

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # NAT Gateway for private subnets
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-NAT-GW"

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-Private-Routes"

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  # Security Groups
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for web servers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-WebServer-SG"

  InstanceConnectEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EC2 Instance Connect Endpoint
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-InstanceConnect-SG"

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-Database-SG"

  # EC2 Instance Connect Endpoint
  EC2InstanceConnectEndpoint:
    Type: AWS::EC2::InstanceConnectEndpoint
    Properties:
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref InstanceConnectEndpointSecurityGroup
      PreserveClientIp: true
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-InstanceConnectEndpoint"

  # Bastion Host in Public Subnet
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref WebServerSecurityGroup
          SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          echo "This is a bastion host for debugging" > /home/ec2-user/README.txt
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-BastionHost"

  # Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-ALB"

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebServerTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  WebServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC
      TargetType: instance
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-WebServer-TG"

  # Database Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-DB-Subnet-Group"

  # RDS MySQL Database
  Database:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - PrivateSubnet1RouteTableAssociation
      - PrivateSubnet2RouteTableAssociation
      - DBSubnetGroup
    Properties:
      DBInstanceIdentifier: !Sub "${AWS::StackName}-database"
      AllocatedStorage: !If [IsProd, 20, 5]
      DBInstanceClass: !Ref DBInstanceClass
      DBName: !Ref DBName
      Engine: mysql
      EngineVersion: 5.7
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      MultiAZ: false
      StorageType: gp2
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-MySQL-DB"
    DeletionPolicy: Snapshot

  # S3 Bucket for web assets
  WebAssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub "${AWS::StackName}-web-assets-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-Web-Assets"

  # S3 Bucket for application files
  AppAssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub "${AWS::StackName}-app-assets-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-App-Assets"

  # Lambda for copying app files to S3
  AppFilesUploaderLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt AppUploaderLambdaRole.Arn
      Runtime: python3.9
      Timeout: 300
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          import cfnresponse
          import os
          import base64
          
          s3 = boto3.client('s3')
          
          def write_file(bucket, key, content, content_type='text/plain'):
              s3.put_object(
                  Bucket=bucket,
                  Key=key,
                  Body=content,
                  ContentType=content_type
              )
              
          def handler(event, context):
              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      bucket = event['ResourceProperties']['Bucket']
                      
                      # Write setup.sh
                      setup_content = """#!/bin/bash -xe

# Update packages
yum update -y

# Install dependencies
yum install -y httpd mysql git jq
amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2

# Install Node.js
curl -sL https://rpm.nodesource.com/setup_16.x | bash -
yum install -y nodejs

# Create app directory
mkdir -p /var/www/cloudmart
cd /var/www/cloudmart

# Clone the repository (adjust this to your actual repository)
# git clone https://github.com/yourusername/cloudmart .

# If we're not cloning from a repository, we'll copy the app files from CloudFormation init
cp -r /tmp/app/* .

# Install npm dependencies
npm install

# Set environment variables for database connection
cat > /etc/environment << EOL
DB_HOST=${DB_HOST}
DB_USER=${DB_USER}
DB_PASSWORD=${DB_PASSWORD}
DB_NAME=${DB_NAME}
EOL

# Set up systemd service for the Node.js application
cat > /etc/systemd/system/cloudmart.service << EOL
[Unit]
Description=CloudMart Node.js Application
After=network.target

[Service]
Environment=DB_HOST=${DB_HOST} DB_USER=${DB_USER} DB_PASSWORD=${DB_PASSWORD} DB_NAME=${DB_NAME}
WorkingDirectory=/var/www/cloudmart
ExecStart=/usr/bin/node server.js
Restart=always
User=root
Group=root
Environment=PATH=/usr/bin:/usr/local/bin
Environment=NODE_ENV=production

[Install]
WantedBy=multi-user.target
EOL

# Enable and start the service
systemctl enable cloudmart.service
systemctl start cloudmart.service

# Set up Apache as a reverse proxy
cat > /etc/httpd/conf.d/cloudmart.conf << EOL
<VirtualHost *:80>
    ServerName localhost
    DocumentRoot /var/www/cloudmart/public

    # Proxy API requests to the Node.js application
    ProxyRequests Off
    ProxyPreserveHost On
    
    <Location /api>
        ProxyPass http://localhost:80/api
        ProxyPassReverse http://localhost:80/api
    </Location>
    
    <Location /health>
        ProxyPass http://localhost:80/health
        ProxyPassReverse http://localhost:80/health
    </Location>
    
    # Serve static files directly from Apache
    <Directory "/var/www/cloudmart/public">
        AllowOverride All
        Require all granted
    </Directory>
    
    ErrorLog /var/log/httpd/cloudmart-error.log
    CustomLog /var/log/httpd/cloudmart-access.log combined
</VirtualHost>
EOL

# Load mod_proxy and related modules
cat > /etc/httpd/conf.modules.d/00-proxy.conf << EOL
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so
LoadModule proxy_balancer_module modules/mod_proxy_balancer.so
LoadModule lbmethod_byrequests_module modules/mod_lbmethod_byrequests.so
EOL

# Set permissions
chown -R apache:apache /var/www/cloudmart/public
chmod -R 755 /var/www/cloudmart

# Enable and start Apache
systemctl enable httpd
systemctl start httpd

# Create a simple script to test the API endpoints
chmod +x /var/www/cloudmart/test-api.sh

# Create a welcome page with instructions for testing the API
cat > /var/www/cloudmart/public/welcome.html << EOL
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CloudMart API Testing</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        pre {
            background-color: #f4f4f4;
            padding: 10px;
            border-radius: 5px;
            overflow-x: auto;
        }
        .command {
            font-family: monospace;
            background-color: #f0f0f0;
            padding: 2px 5px;
            border-radius: 3px;
        }
    </style>
</head>
<body>
    <h1>Welcome to CloudMart API Testing</h1>
    
    <p>This page provides instructions for testing the CloudMart API endpoints using curl commands.</p>
    
    <h2>API Endpoints</h2>
    
    <h3>1. Get all products</h3>
    <pre>curl -s http://${PUBLIC_IP}/api/products | jq</pre>
    
    <h3>2. Get a specific product</h3>
    <pre>curl -s http://${PUBLIC_IP}/api/products/1 | jq</pre>
    
    <h3>3. Create a new product</h3>
    <pre>curl -s -X POST http://${PUBLIC_IP}/api/products \\
  -H "Content-Type: application/json" \\
  -d '{"name":"New Product","price":99.99,"description":"A new product","image":"https://via.placeholder.com/300x200?text=New+Product"}' | jq</pre>
    
    <h3>4. Update a product</h3>
    <pre>curl -s -X PUT http://${PUBLIC_IP}/api/products/1 \\
  -H "Content-Type: application/json" \\
  -d '{"name":"Updated Product","price":129.99}' | jq</pre>
    
    <h3>5. Delete a product</h3>
    <pre>curl -s -X DELETE http://${PUBLIC_IP}/api/products/1 | jq</pre>
    
    <h2>Automated Testing</h2>
    
    <p>You can run all these tests automatically by connecting to the instance via SSH and running the test script:</p>
    
    <pre>ssh ec2-user@${PUBLIC_IP}
sudo /var/www/cloudmart/test-api.sh localhost</pre>
    
    <h2>View the Web Application</h2>
    
    <p>You can also view the web application by navigating to <a href="http://${PUBLIC_IP}">http://${PUBLIC_IP}</a></p>
</body>
</html>
EOL

# Print info to logs
echo "CloudMart setup completed at $(date)" > /var/log/cloudmart-setup.log
echo "Database endpoint: ${DB_HOST}" >> /var/log/cloudmart-setup.log
"""
                      write_file(bucket, 'setup.sh', setup_content)
                      
                      # Write test-api.sh
                      testapi_content = """#!/bin/bash

# CloudMart API Testing Script
# ----------------------------
# This script demonstrates how to interact with the CloudMart API
# It uses curl to make HTTP requests to the API endpoints

# Set the base URL (change this to your actual server address)
BASE_URL="http://localhost/api"

# Text colors
GREEN='\\033[0;32m'
YELLOW='\\033[1;33m'
BLUE='\\033[0;34m'
RED='\\033[0;31m'
NC='\\033[0m' # No Color

echo -e "${BLUE}==================================${NC}"
echo -e "${BLUE}     CloudMart API Test Script    ${NC}"
echo -e "${BLUE}==================================${NC}"

# If a server address is provided as an argument, use it
if [ ! -z "$1" ]; then
  BASE_URL="http://$1/api"
  echo -e "${YELLOW}Using server: $1${NC}"
else
  echo -e "${YELLOW}Using default server: localhost${NC}"
fi

echo ""
echo -e "${GREEN}1. Getting all products${NC}"
echo -e "${YELLOW}curl -s $BASE_URL/products${NC}"
curl -s "$BASE_URL/products" | jq || echo "Error fetching products"
echo ""

echo -e "${GREEN}2. Getting a specific product (ID: 1)${NC}"
echo -e "${YELLOW}curl -s $BASE_URL/products/1${NC}"
curl -s "$BASE_URL/products/1" | jq || echo "Error fetching product"
echo ""

echo -e "${GREEN}3. Creating a new product${NC}"
echo -e "${YELLOW}curl -s -X POST $BASE_URL/products -H 'Content-Type: application/json' -d '{\\\"name\\\":\\\"Test Product\\\",\\\"price\\\":19.99,\\\"description\\\":\\\"A test product\\\",\\\"image\\\":\\\"https://via.placeholder.com/300x200?text=Test+Product\\\"}'${NC}"
NEW_PRODUCT=$(curl -s -X POST "$BASE_URL/products" \\
  -H "Content-Type: application/json" \\
  -d '{"name":"Test Product","price":19.99,"description":"A test product","image":"https://via.placeholder.com/300x200?text=Test+Product"}')
echo "$NEW_PRODUCT" | jq || echo "Error creating product"
echo ""

# Extract the ID of the newly created product
NEW_ID=$(echo "$NEW_PRODUCT" | jq -r '.id')

if [ "$NEW_ID" != "null" ] && [ ! -z "$NEW_ID" ]; then
  echo -e "${GREEN}4. Updating the product (ID: $NEW_ID)${NC}"
  echo -e "${YELLOW}curl -s -X PUT $BASE_URL/products/$NEW_ID -H 'Content-Type: application/json' -d '{\\\"name\\\":\\\"Updated Product\\\",\\\"price\\\":29.99}'${NC}"
  curl -s -X PUT "$BASE_URL/products/$NEW_ID" \\
    -H "Content-Type: application/json" \\
    -d '{"name":"Updated Product","price":29.99}' | jq || echo "Error updating product"
  echo ""

  echo -e "${GREEN}5. Deleting the product (ID: $NEW_ID)${NC}"
  echo -e "${YELLOW}curl -s -X DELETE $BASE_URL/products/$NEW_ID${NC}"
  curl -s -X DELETE "$BASE_URL/products/$NEW_ID" | jq || echo "Error deleting product"
  echo ""
else
  echo -e "${RED}Could not get ID of new product, skipping update and delete tests${NC}"
fi

echo -e "${GREEN}6. Verifying all products again${NC}"
echo -e "${YELLOW}curl -s $BASE_URL/products${NC}"
curl -s "$BASE_URL/products" | jq || echo "Error fetching products"
echo ""

echo -e "${BLUE}==================================${NC}"
echo -e "${BLUE}     API Testing Complete         ${NC}"
echo -e "${BLUE}==================================${NC}"
"""
                      write_file(bucket, 'test-api.sh', testapi_content)
                      
                      # Write package.json
                      package_content = """{
  "name": "cloudmart",
  "version": "1.0.0",
  "description": "CloudMart - A demo e-commerce application for AWS CloudFormation",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "mysql2": "^2.3.3",
    "cors": "^2.8.5"
  }
}"""
                      write_file(bucket, 'package.json', package_content)
                      
                      # Create server.js
                      server_content = """const express = require('express');
const path = require('path');
const mysql = require('mysql2/promise');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));

// Database configuration
const dbConfig = {
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME
};

// Initialize database
async function initializeDatabase() {
  try {
    const connection = await mysql.createConnection({
      host: dbConfig.host,
      user: dbConfig.user,
      password: dbConfig.password
    });
    
    // Create database if it doesn't exist
    await connection.execute(`CREATE DATABASE IF NOT EXISTS ${dbConfig.database}`);
    await connection.execute(`USE ${dbConfig.database}`);
    
    // Create products table
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS products (
        id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        price DECIMAL(10, 2) NOT NULL,
        description TEXT,
        image VARCHAR(255),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
      )
    `);
    
    // Check if products table is empty
    const [rows] = await connection.execute('SELECT COUNT(*) as count FROM products');
    if (rows[0].count === 0) {
      // Insert sample products
      await connection.execute(`
        INSERT INTO products (name, price, description, image) VALUES 
        ('Cloud Storage Plus', 29.99, 'Unlimited cloud storage for all your files', 'https://via.placeholder.com/300x200?text=Cloud+Storage'),
        ('Web Hosting Pro', 49.99, 'Professional web hosting with 99.9% uptime', 'https://via.placeholder.com/300x200?text=Web+Hosting'),
        ('Database Server', 99.99, 'High-performance database server with automatic backups', 'https://via.placeholder.com/300x200?text=Database'),
        ('API Gateway', 59.99, 'Secure gateway for all your API needs', 'https://via.placeholder.com/300x200?text=API+Gateway'),
        ('Load Balancer', 79.99, 'Distribute traffic efficiently across your servers', 'https://via.placeholder.com/300x200?text=Load+Balancer'),
        ('CDN Package', 39.99, 'Content delivery network for faster website loading', 'https://via.placeholder.com/300x200?text=CDN')
      `);
      console.log('Sample products inserted');
    }
    
    await connection.end();
    console.log('Database initialized successfully');
  } catch (error) {
    console.error('Error initializing database:', error);
  }
}

// API Routes
// Get all products
app.get('/api/products', async (req, res) => {
  try {
    const connection = await mysql.createConnection(dbConfig);
    const [rows] = await connection.execute('SELECT * FROM products');
    await connection.end();
    res.json(rows);
  } catch (error) {
    console.error('Error fetching products:', error);
    res.status(500).json({ error: 'Error fetching products' });
  }
});

// Get a single product
app.get('/api/products/:id', async (req, res) => {
  try {
    const connection = await mysql.createConnection(dbConfig);
    const [rows] = await connection.execute('SELECT * FROM products WHERE id = ?', [req.params.id]);
    await connection.end();
    
    if (rows.length === 0) {
      return res.status(404).json({ error: 'Product not found' });
    }
    
    res.json(rows[0]);
  } catch (error) {
    console.error('Error fetching product:', error);
    res.status(500).json({ error: 'Error fetching product' });
  }
});

// Create a new product
app.post('/api/products', async (req, res) => {
  const { name, price, description, image } = req.body;
  
  if (!name || !price) {
    return res.status(400).json({ error: 'Name and price are required' });
  }
  
  try {
    const connection = await mysql.createConnection(dbConfig);
    const [result] = await connection.execute(
      'INSERT INTO products (name, price, description, image) VALUES (?, ?, ?, ?)',
      [name, price, description, image]
    );
    
    const [rows] = await connection.execute('SELECT * FROM products WHERE id = ?', [result.insertId]);
    await connection.end();
    
    res.status(201).json(rows[0]);
  } catch (error) {
    console.error('Error creating product:', error);
    res.status(500).json({ error: 'Error creating product' });
  }
});

// Update a product
app.put('/api/products/:id', async (req, res) => {
  const { name, price, description, image } = req.body;
  const updates = [];
  const values = [];
  
  if (name) {
    updates.push('name = ?');
    values.push(name);
  }
  
  if (price) {
    updates.push('price = ?');
    values.push(price);
  }
  
  if (description) {
    updates.push('description = ?');
    values.push(description);
  }
  
  if (image) {
    updates.push('image = ?');
    values.push(image);
  }
  
  if (updates.length === 0) {
    return res.status(400).json({ error: 'No fields to update' });
  }
  
  values.push(req.params.id);
  
  try {
    const connection = await mysql.createConnection(dbConfig);
    await connection.execute(
      `UPDATE products SET ${updates.join(', ')} WHERE id = ?`,
      values
    );
    
    const [rows] = await connection.execute('SELECT * FROM products WHERE id = ?', [req.params.id]);
    await connection.end();
    
    if (rows.length === 0) {
      return res.status(404).json({ error: 'Product not found' });
    }
    
    res.json(rows[0]);
  } catch (error) {
    console.error('Error updating product:', error);
    res.status(500).json({ error: 'Error updating product' });
  }
});

// Delete a product
app.delete('/api/products/:id', async (req, res) => {
  try {
    const connection = await mysql.createConnection(dbConfig);
    
    // First check if the product exists
    const [rows] = await connection.execute('SELECT * FROM products WHERE id = ?', [req.params.id]);
    
    if (rows.length === 0) {
      await connection.end();
      return res.status(404).json({ error: 'Product not found' });
    }
    
    await connection.execute('DELETE FROM products WHERE id = ?', [req.params.id]);
    await connection.end();
    
    res.json({ message: 'Product deleted successfully' });
  } catch (error) {
    console.error('Error deleting product:', error);
    res.status(500).json({ error: 'Error deleting product' });
  }
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.send('OK');
});

// Catch-all route to serve the frontend
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Initialize database and start server
initializeDatabase().then(() => {
  app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
  });
});
"""
                      write_file(bucket, 'server.js', server_content)
                      
                      # Create a directory for public files
                      mkdir_p = True
                      
                      # Write public/index.html
                      index_content = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CloudMart - Your Cloud Shopping Destination</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .hero {
            background-color: #f8f9fa;
            padding: 4rem 0;
            margin-bottom: 2rem;
        }
        .card {
            margin-bottom: 1.5rem;
            transition: transform 0.3s;
        }
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        }
        .footer {
            background-color: #343a40;
            color: white;
            padding: 2rem 0;
            margin-top: 3rem;
        }
        #shopping-cart {
            position: fixed;
            right: 20px;
            bottom: 20px;
            background-color: #007bff;
            color: white;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            cursor: pointer;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            z-index: 100;
        }
        #cart-count {
            position: absolute;
            top: -5px;
            right: -5px;
            background-color: red;
            color: white;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        #cart-modal .modal-body {
            max-height: 400px;
            overflow-y: auto;
        }
        .cart-item {
            border-bottom: 1px solid #eee;
            padding: 10px 0;
        }
        .banner {
            background-color: #dc3545;
            color: white;
            padding: 10px;
            text-align: center;
            font-weight: bold;
        }
        .api-section {
            background-color: #f0f8ff;
            padding: 2rem;
            border-radius: 8px;
            margin: 2rem 0;
        }
        .api-command {
            background-color: #343a40;
            color: white;
            padding: 1rem;
            border-radius: 4px;
            overflow-x: auto;
            margin: 1rem 0;
        }
    </style>
</head>
<body>
    <div class="banner">
        ⚠️ This is a demo application for educational purposes only ⚠️
    </div>

    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="#">CloudMart</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link active" href="#">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#products">Products</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#api-docs">API</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#about">About</a>
                    </li>
                </ul>
                <form class="d-flex">
                    <input class="form-control me-2" type="search" placeholder="Search products...">
                    <button class="btn btn-outline-light" type="submit">Search</button>
                </form>
            </div>
        </div>
    </nav>

    <section class="hero">
        <div class="container text-center">
            <h1>Welcome to CloudMart</h1>
            <p class="lead">Your one-stop shop for cloud-based products and services</p>
            <a href="#products" class="btn btn-primary btn-lg">Shop Now</a>
        </div>
    </section>

    <div class="container">
        <h2 class="text-center mb-4" id="products">Featured Products</h2>
        <div class="row" id="products-container">
            <!-- Products will be loaded here dynamically -->
            <div class="col-12 text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Loading products...</p>
            </div>
        </div>
    </div>

    <div class="container api-section" id="api-docs">
        <h2 class="mb-4">API Documentation</h2>
        <p>CloudMart provides a RESTful API for product management. Here are some example commands:</p>
        
        <h5>Get all products</h5>
        <div class="api-command">
            curl -X GET http://<your-server-address>/api/products
        </div>
        
        <h5>Get a specific product</h5>
        <div class="api-command">
            curl -X GET http://<your-server-address>/api/products/1
        </div>
        
        <h5>Create a new product</h5>
        <div class="api-command">
            curl -X POST http://<your-server-address>/api/products \\<br>
            -H "Content-Type: application/json" \\<br>
            -d '{"name":"New Product","price":99.99,"description":"Product description","image":"product-image.jpg"}'
        </div>
        
        <h5>Update a product</h5>
        <div class="api-command">
            curl -X PUT http://<your-server-address>/api/products/1 \\<br>
            -H "Content-Type: application/json" \\<br>
            -d '{"name":"Updated Name","price":129.99}'
        </div>
        
        <h5>Delete a product</h5>
        <div class="api-command">
            curl -X DELETE http://<your-server-address>/api/products/1
        </div>
    </div>

    <div class="container" id="about">
        <h2 class="text-center mb-4">About CloudMart</h2>
        <div class="row">
            <div class="col-md-6">
                <h4>Our Mission</h4>
                <p>At CloudMart, we're passionate about providing high-quality cloud products at affordable prices. Our mission is to make cloud technology accessible to everyone.</p>
                <p>This demo application shows how to integrate a frontend with a backend API running on AWS infrastructure deployed via CloudFormation.</p>
            </div>
            <div class="col-md-6">
                <h4>AWS Architecture</h4>
                <p>This application is powered by:</p>
                <ul>
                    <li>EC2 instances in an Auto Scaling Group</li>
                    <li>Application Load Balancer for traffic distribution</li>
                    <li>RDS MySQL database for product storage</li>
                    <li>VPC with public and private subnets</li>
                </ul>
            </div>
        </div>
    </div>

    <div id="shopping-cart">
        <i class="bi bi-cart-fill"></i>
        <span id="cart-count">0</span>
    </div>

    <!-- Cart Modal -->
    <div class="modal fade" id="cart-modal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Shopping Cart</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="cart-items">
                        <!-- Cart items will be displayed here -->
                        <p class="text-center">Your cart is empty</p>
                    </div>
                    <div class="d-flex justify-content-between mt-3">
                        <strong>Total:</strong>
                        <strong id="cart-total">$0.00</strong>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary">Checkout</button>
                </div>
            </div>
        </div>
    </div>

    <footer class="footer" id="contact">
        <div class="container">
            <div class="row">
                <div class="col-md-4">
                    <h5>CloudMart</h5>
                    <p>Your cloud shopping destination</p>
                </div>
                <div class="col-md-4">
                    <h5>Contact</h5>
                    <p>Email: info@cloudmart.example</p>
                    <p>Phone: (555) 123-4567</p>
                </div>
                <div class="col-md-4">
                    <h5>Links</h5>
                    <ul class="list-unstyled">
                        <li><a href="#" class="text-white">Home</a></li>
                        <li><a href="#products" class="text-white">Products</a></li>
                        <li><a href="#api-docs" class="text-white">API</a></li>
                        <li><a href="#about" class="text-white">About</a></li>
                    </ul>
                </div>
            </div>
            <hr>
            <div class="text-center">
                <p>© 2023 CloudMart Demo. This is a fictitious company created for educational purposes.</p>
            </div>
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Fetch products from the API
            fetch('/api/products')
                .then(response => response.json())
                .then(products => {
                    displayProducts(products);
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                    // Display sample products as fallback
                    displayProducts(sampleProducts);
                });
                
            // Sample product data as fallback
            const sampleProducts = [
                { id: 1, name: 'Cloud Storage Plus', price: 29.99, description: 'Unlimited cloud storage for all your files', image: 'https://via.placeholder.com/300x200?text=Cloud+Storage' },
                { id: 2, name: 'Web Hosting Pro', price: 49.99, description: 'Professional web hosting with 99.9% uptime', image: 'https://via.placeholder.com/300x200?text=Web+Hosting' },
                { id: 3, name: 'Database Server', price: 99.99, description: 'High-performance database server with automatic backups', image: 'https://via.placeholder.com/300x200?text=Database' },
                { id: 4, name: 'API Gateway', price: 59.99, description: 'Secure gateway for all your API needs', image: 'https://via.placeholder.com/300x200?text=API+Gateway' },
                { id: 5, name: 'Load Balancer', price: 79.99, description: 'Distribute traffic efficiently across your servers', image: 'https://via.placeholder.com/300x200?text=Load+Balancer' },
                { id: 6, name: 'CDN Package', price: 39.99, description: 'Content delivery network for faster website loading', image: 'https://via.placeholder.com/300x200?text=CDN' }
            ];

            // Initialize cart
            let cart = [];
            updateCartCount();
            
            // Replace API URLs with actual server address
            const serverAddress = window.location.hostname;
            document.querySelectorAll('.api-command').forEach(el => {
                el.textContent = el.textContent.replace('<your-server-address>', serverAddress);
            });
            
            function displayProducts(products) {
                const productsContainer = document.getElementById('products-container');
                productsContainer.innerHTML = '';
                
                products.forEach(product => {
                    const productCard = document.createElement('div');
                    productCard.className = 'col-md-4';
                    productCard.innerHTML = `
                        <div class="card">
                            <img src="${product.image || 'https://via.placeholder.com/300x200?text=Product'}" class="card-img-top" alt="${product.name}">
                            <div class="card-body">
                                <h5 class="card-title">${product.name}</h5>
                                <p class="card-text">${product.description || 'No description available'}</p>
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="h5">$${parseFloat(product.price).toFixed(2)}</span>
                                    <button class="btn btn-primary add-to-cart" data-id="${product.id}">Add to Cart</button>
                                </div>
                            </div>
                        </div>
                    `;
                    productsContainer.appendChild(productCard);
                });

                // Add event listeners to "Add to Cart" buttons
                document.querySelectorAll('.add-to-cart').forEach(button => {
                    button.addEventListener('click', function() {
                        const productId = parseInt(this.getAttribute('data-id'));
                        const product = products.find(p => p.id === productId);
                        
                        // Check if product is already in cart
                        const existingItem = cart.find(item => item.id === productId);
                        if (existingItem) {
                            existingItem.quantity += 1;
                        } else {
                            cart.push({...product, quantity: 1});
                        }
                        
                        updateCartCount();
                        showCartNotification(product.name);
                    });
                });
            }

            // Shopping cart functionality
            const cartIcon = document.getElementById('shopping-cart');
            const cartModal = new bootstrap.Modal(document.getElementById('cart-modal'));
            
            cartIcon.addEventListener('click', function() {
                updateCartDisplay();
                cartModal.show();
            });

            function updateCartCount() {
                const count = cart.reduce((total, item) => total + item.quantity, 0);
                document.getElementById('cart-count').textContent = count;
            }

            function updateCartDisplay() {
                const cartItemsContainer = document.getElementById('cart-items');
                const cartTotalElement = document.getElementById('cart-total');
                
                if (cart.length === 0) {
                    cartItemsContainer.innerHTML = '<p class="text-center">Your cart is empty</p>';
                    cartTotalElement.textContent = '$0.00';
                    return;
                }
                
                let cartHTML = '';
                let total = 0;
                
                cart.forEach(item => {
                    const itemTotal = item.price * item.quantity;
                    total += itemTotal;
                    cartHTML += `
                        <div class="cart-item">
                            <div class="d-flex justify-content-between">
                                <h6>${item.name}</h6>
                                <button class="btn btn-sm btn-danger remove-from-cart" data-id="${item.id}">×</button>
                            </div>
                            <div class="d-flex justify-content-between">
                                <span>${item.quantity} × $${parseFloat(item.price).toFixed(2)}</span>
                                <span>$${itemTotal.toFixed(2)}</span>
                            </div>
                        </div>
                    `;
                });
                
                cartItemsContainer.innerHTML = cartHTML;
                cartTotalElement.textContent = `$${total.toFixed(2)}`;
                
                // Add event listeners for remove buttons
                document.querySelectorAll('.remove-from-cart').forEach(button => {
                    button.addEventListener('click', function() {
                        const productId = parseInt(this.getAttribute('data-id'));
                        cart = cart.filter(item => item.id !== productId);
                        updateCartCount();
                        updateCartDisplay();
                    });
                });
            }

            function showCartNotification(productName) {
                // Create a toast notification
                const toast = document.createElement('div');
                toast.className = 'toast align-items-center text-white bg-success';
                toast.setAttribute('role', 'alert');
                toast.setAttribute('aria-live', 'assertive');
                toast.setAttribute('aria-atomic', 'true');
                toast.innerHTML = `
                    <div class="d-flex">
                        <div class="toast-body">
                            <strong>${productName}</strong> added to cart!
                        </div>
                        <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                `;
                
                // Add to the document
                const toastContainer = document.createElement('div');
                toastContainer.className = 'toast-container position-fixed bottom-0 start-0 p-3';
                toastContainer.appendChild(toast);
                document.body.appendChild(toastContainer);
                
                // Show the toast
                const bsToast = new bootstrap.Toast(toast, { delay: 3000 });
                bsToast.show();
                
                // Remove the container after the toast is hidden
                toast.addEventListener('hidden.bs.toast', function() {
                    document.body.removeChild(toastContainer);
                });
            }
        });
    </script>
</body>
</html>"""
                      write_file(bucket, 'public/index.html', index_content)
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  print(str(e))
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})
      
  AppUploaderLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt AppAssetsBucket.Arn
                  - !Sub "${AppAssetsBucket.Arn}/*"

  # Custom resource to upload app files to S3
  AppFilesUploaderResource:
    Type: Custom::AppFilesUploader
    DependsOn: AppAssetsBucket
    Properties:
      ServiceToken: !GetAtt AppFilesUploaderLambda.Arn
      Bucket: !Ref AppAssetsBucket

Outputs:
  VPC:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${EnvironmentName}-VPCID"

  PublicSubnets:
    Description: List of public subnet IDs
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
    Export:
      Name: !Sub "${EnvironmentName}-PublicSubnets"

  PrivateSubnets:
    Description: List of private subnet IDs
    Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
    Export:
      Name: !Sub "${EnvironmentName}-PrivateSubnets"

  WebServerSecurityGroup:
    Description: Security group for web servers
    Value: !Ref WebServerSecurityGroup
    Export:
      Name: !Sub "${EnvironmentName}-WebServerSG"

  LoadBalancerDNS:
    Description: DNS name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub "${EnvironmentName}-ALBDNS"

  DatabaseEndpoint:
    Description: Connection endpoint for the database
    Value: !GetAtt Database.Endpoint.Address
    Export:
      Name: !Sub "${EnvironmentName}-DBEndpoint"

  WebAssetsBucketName:
    Description: Name of the S3 bucket for web assets
    Value: !Ref WebAssetsBucket
    Export:
      Name: !Sub "${EnvironmentName}-WebAssetsBucket"
      
  EC2InstanceConnectEndpointId:
    Description: ID of the EC2 Instance Connect Endpoint
    Value: !Ref EC2InstanceConnectEndpoint
    Export:
      Name: !Sub "${EnvironmentName}-EC2InstanceConnectEndpointId"
      
  BastionHostPublicIP:
    Description: Public IP address of the bastion host
    Value: !GetAtt BastionHost.PublicIp
    Export:
      Name: !Sub "${EnvironmentName}-BastionHostPublicIP" 